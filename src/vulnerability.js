const fs = require('fs')
const ROOT = require('app-root-path')
const path = require('path')
const $vul = require('../db/vulnerability')
const $ = require('../src/utils')
const { embedAPI } = require('../tf/utils')

const DATA_PATH = `${ROOT}/db/resource1` // 1-2503 8 types of vul
// const DATA_PATH = `${ROOT}/db/resource2` // 2504-3393 4 types of vul

async function insert() {
    const dataset = []
    readDirectory(DATA_PATH, dataset)
    const map = {}
    for (const { content, category, file } of dataset) {
        if (!map[content]) map[content] = { category: [category], file }
        else map[content].category.push(category)
        map[content].category = Array.from(new Set(map[content].category))
    }
    const data = []
    for (const i in map) data.push({ SourceCode: i, Vulnerability: JSON.stringify(map[i].category), File: map[i].file })
    const res = await $vul.T.bulkCreate(data)
    console.log('insert', res)
}

// 递归遍历文件夹并读取Solidity文件内容
function readDirectory(directoryPath, dataset) {
    const files = fs.readdirSync(directoryPath)
    const category = path.basename(directoryPath) // 获取文件夹名称

    for (const file of files) {
        const filePath = path.join(directoryPath, file)
        const fileStat = fs.statSync(filePath)

        if (fileStat.isDirectory()) {
            // 如果是文件夹，递归读取其中的文件
            readDirectory(filePath, dataset)
        } else if (file.endsWith('.sol')) {
            // 如果是Solidity文件，读取内容并添加到数据集
            const solidityContent = fs.readFileSync(filePath, 'utf-8')
            dataset.push({ category, content: solidityContent, file })
        }
    }
}

// embed all: average pool embedding
async function embedAllAvg(start = 1, end) {
    const max = end || (await $vul.maxId())
    for (let i = start; i <= max; i++) {
        const c = await $vul.findOneByPk(i)
        if (!c) continue
        console.log('Embed Avg', i)
        const code = $.getCodeMap($.clearCode(c.SourceCode), 'solidity')
        const json = {}
        for (const i in code) {
            json[i] = {}
            for (const j in code[i]) json[i][j] = await embedAPI(code[i][j])
        }
        const data = {
            Id: i,
            Embedding: JSON.stringify(json)
        }
        console.log(data)
        await $vul.upsert(data)
    }
}

// embed all: max pool embedding
/*
async function embedAllMax(start = 1, end) {
    const max = end || (await $contract.maxId())
    for (let i = start; i <= max; i++) {
        const code = await $contract.getCodeMapById(i)
        if (!code) continue
        console.log('Embed Max', i)
        const json = {}
        for (const i in code) {
            json[i] = {}
            for (const j in code[i]) json[i][j] = await embedAPI(removeBr(code[i][j]), 'embeddingMax')
        }
        console.log(json)
        const data = {
            Id: i,
            EmbeddingMax: JSON.stringify(json)
        }
        await $contract.upsert(data)
    }
}
*/

if (process.argv[1].includes('src/vulnerability')) {
    if (process.argv[2] == 'insert') insert()
    if (process.argv[2] == 'embed') embedAllAvg(process.argv[3], process.argv[4])
}
