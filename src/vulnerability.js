const fs = require('fs')
const ROOT = require('app-root-path')
const path = require('path')
const $vul = require('../db/vulnerability')
const $contract = require('../db/contract')

/*
 * dataset resource (8 types of vulnerabilities) from
 * https://github.com/Messi-Q/Smart-Contract-Dataset
 * https://drive.google.com/file/d/1iU2J-BIstCa3ooVhXu-GljOBzWi9gVrG/view
 */
const DATA_PATH = `${ROOT}/db/resource` // 1-2503 8 types of vul

async function insert() {
    const dataset = []
    readDirectory(DATA_PATH, dataset)
    const map = {}
    // combine same content for multi-categories
    for (const { content, category, file } of dataset) {
        if (!map[content]) map[content] = { category: [category], file }
        else map[content].category.push(category)
        // remove duplicate
        map[content].category = Array.from(new Set(map[content].category))
    }
    for (const i in map) {
        const row = await $contract.insert({ SourceCode: i })
        const res = await $vul.insert({ Vulnerability: JSON.stringify(map[i].category), ContractId: row.Id })
        console.log('insert', res.dataValues)
    }
}

// 递归遍历文件夹并读取Solidity文件内容
function readDirectory(directoryPath, dataset) {
    const files = fs.readdirSync(directoryPath)
    const category = path.basename(directoryPath) // 获取文件夹名称

    for (const file of files) {
        const filePath = path.join(directoryPath, file)
        const fileStat = fs.statSync(filePath)

        if (fileStat.isDirectory()) readDirectory(filePath, dataset)
        else if (file.endsWith('.sol')) {
            // 如果是Solidity文件，读取内容并添加到数据集
            const content = fs.readFileSync(filePath, 'utf-8')
            dataset.push({ category, content, file })
        }
    }
}

if (process.argv[1].includes('src/vulnerability')) {
    if (process.argv[2] == 'insert') insert()
}
